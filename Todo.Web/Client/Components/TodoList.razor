@inject TodoClient Client

@if (todos is null)
{
    <div class="d-flex justify-content-center align-items-center vh-100">
        <div class="spinner-border" role="status"></div>
    </div>
}
else
{
    <h3 class="mb-3">Todo List</h3>

    <EditForm @ref="@form" Model="@this" OnValidSubmit="@AddTodo" class="d-flex justify-content-center align-items-center mb-4">
        <DataAnnotationsValidator />
        <div class="form-outline flex-fill">
            <InputText autofocus class="form-control form-control-lg" @bind-Value="@NewTodo" placeholder="Type a new todo item" />
            <ValidationMessage For="@(() => NewTodo)" />
        </div>
    </EditForm>

    <ul class="list-group mb-0">
        @foreach (var todo in todos)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center border-start-0 border-top-0 border-end-0 border-bottom rounded-0 mb-2" @key="@todo.Id">
                <div class="d-flex align-items-center">
                    <input class="form-check-input me-2" type="checkbox" checked=@todo.IsComplete aria-label="..." @onclick="@(() => ToggleComplete(todo))" />
                    @todo.Title
                </div>
                <a class="todo-delete" data-mdb-toggle="tooltip" title="Remove item" style="text-decoration:none" @onclick="@(() => DeleteTodo(todo))">🗙</a>
            </li>
        }
    </ul>

    <h5>Status: @status</h5>
}

@code {
    List<TodoItem>? todos;
    EditForm? form;

    String status = "OK";

    [Required]
    public string? NewTodo { get; set; }

    [Parameter] 
    public EventCallback OnForbidden { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadTodos();
        SetStatus();
    }

    void SetStatus(string error="")
    {
        if ( error.Length == 0 ) {
            var done = todos.Where(t=>t.IsComplete).Count();
            status = $"OK: {todos.Count} todos, {done} done";
        } else {
            status = error;
        }
    }

    async Task LoadTodos()
    {
        (var statusCode, todos) = await Client.GetTodosAsync();

        if (statusCode == HttpStatusCode.Forbidden || statusCode == HttpStatusCode.Unauthorized)
        {
            await OnForbidden.InvokeAsync();
        }

        SetStatus();
    }

    async Task AddTodo()
    {
        var createdTodo = await Client.AddTodoAsync(NewTodo);
        if (createdTodo is not null)
        {
            NewTodo = null;
            form!.EditContext!.MarkAsUnmodified();
            todos!.Add(createdTodo);
        }

        SetStatus();
    }

    async Task ToggleComplete(TodoItem todo)
    {
        todo.IsComplete = ! todo.IsComplete;

        var result = await Client.UpdateTodoAsync(todo);

        if ( result ) {
            SetStatus();            
        } else {
            SetStatus("Failed to update Todo!");
        }
    }

    async Task DeleteTodo(TodoItem todo)
    {
        if (await Client.DeleteTodoAsync(todo.Id))
        {
            todos!.Remove(todo);
        }

        SetStatus();
    }
}
